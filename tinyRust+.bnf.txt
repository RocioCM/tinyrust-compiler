#------------------------sintaxis completa de tinyRust+-------------------
Start ::= Start1 | Clases Main
Main ::= "{" "static fn main ()" Bloque Main2
Main2 ::= "}" | Miembros "}" 

Clases ::= Clase Clases | Clase
Clase ::= "class" "idClase" Clase1
Clase1 ::= "{" "}" | "{" Miembros "}" | Herencia "{" "}" | Herencia "{" Miembros "}"

Herencia ::= ":" "idClase" 
Miembros ::= Miembro Miembros
    | Tipo ":" Lista-Declaración-Variables ";" 
    | Visibilidad Tipo ":" Lista-Declaración-Variables ";" 
    | "create" Argumentos-Formales Bloque 
    | "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 
    | Forma-Método "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 
Miembro ::= Tipo ":" Lista-Declaración-Variables ";" 
    | Visibilidad Tipo ":" Lista-Declaración-Variables ";" 
    | "create" Argumentos-Formales Bloque 
    | "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 
    | Forma-Método "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método

Argumentos-Formales ::= "(" ")" | "(" Lista-Argumentos-Formales ")"
Lista-Argumentos-Formales ::= Argumento-Formal "," Lista-Argumentos-Formales 
    | Tipo ":" "idMétodoVariable"
Argumento-Formal ::= Tipo ":" "idMétodoVariable" 
Forma-Método ::= "static"
Visibilidad ::= "pub"
Tipo-Método ::= "Bool" | "I32" | "Str" | "Char" | "idClase" | "Array" Tipo-Primitivo | "void"
Lista-Declaración-Variables ::= "idMétodoVariable" 
    | "idMétodoVariable" "," Lista-Declaracion-Variables
Bloque-Método ::= "{" "}" 
    | "{" Sentencias "}"
    | "{" Decl-Var-LocalesN "}"
    | "{" Decl-Var-LocalesN Sentencias "}"

Decl-Var-LocalesN ::= Decl-Var-Locales Decl-Var-LocalesN | "var" Tipo Lista-Declaracion-Variables
Decl-Var-Locales ::= "var" Tipo Lista-Declaracion-Variables

Bloque ::= "{" "}" | "{" Sentencias "}"

Sentencias ::= ";"
    | Asignación ";" 
    | Sentencia-Simple ";" 
    | SentenciaIf
    | "while" "(" Expresion ")" Sentencia
    | "{" "}" 
    | "{" Sentencias "}"
    | "return" Expresion";"
    | "return" ";" 
    | Sentencia Sentencias

Sentencia ::= ";"
    | Asignación ";" 
    | Sentencia-Simple ";" 
    | SentenciaIf
    | "while" "(" Expresion ")" Sentencia
    | "{" "}" 
    | "{" Sentencias "}"
    | "return" Expresion";"
    | "return" ";"

SentenciaIf ::= "if" "(" Expresion ")" Sentencia SentenciaElse
SentenciaElse ::= "else" Sentencia | LAMBDA

Asignación ::= Asignación-Variable-Simple "="" Expresión | Asignación-Self-Simple "="" Expresion
Asignación-Variable-Simple  ::= "id" 
    | "id" "[" Expresion "]" 
    | "id" Encadenado-SimpleN

Asignación-Self-Simple ::= "self" | "self" Encadenado-SimpleN

Encadenado-SimpleN ::= Encadenado-Simple Encadenado-SimpleN | "." "id"
Encadenado-Simple ::= "." "id"

Sentencia-Simple ::= "(" Expresion ")" 

Lista-Expresiones ::= ExpOr "||" ExpAnd 
    | ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" EncadenadoOp
    | "self" EncadenadoOp
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado
    | Expresion "," Lista-Expresiones

Expresion ::= ExpOr "||" ExpAnd 
    | ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" EncadenadoOp 
    | "self" EncadenadoOp 
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp 
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpOr ::= ExpAnd "&&" ExpIgual ExpOrP
    | ExpIgual OpIgual ExpCompuesta ExpOrP
    | ExpAdd OpCompuesto ExpAdd ExpOrP
    | ExpAdd OpAdd ExpMul ExpOrP
    | ExpMul OpMul ExpUn ExpOrP
    | OpUnario ExpUn ExpOrP
    | "nil" ExpOrP
    | "true" ExpOrP
    | "false" ExpOrP
    | "intLiteral" ExpOrP
    | "stringLiteral" ExpOrP
    | "charLiteral" ExpOrP
    | "(" Expresion ")" EncadenadoOp ExpOrP
    | "self" EncadenadoOp ExpOrP
    | "id" EncadenadoOp ExpOrP
    | "id" Argumentos-Actuales EncadenadoOp ExpOrP
    | "idClase" "." Llamada-Método EncadenadoOp ExpOrP
    | "new" "idClase" Argumentos-Actuales EncadenadoOp ExpOrP
    | "new" Tipo-Primitivo "[" Expresion "]" ExpOrP
    | Primario Encadenado ExpOrP

ExpOrP ::= "||" ExpAnd ExpOrP | LAMBDA

ExpAnd ::= ExpIgual OpIgual ExpCompuesta ExpAndP
    | ExpAdd OpCompuesto ExpAdd ExpAndP
    | ExpAdd OpAdd ExpMul ExpAndP
    | ExpMul OpMul ExpUn ExpAndP
    | OpUnario ExpUn ExpAndP
    | "nil" ExpAndP
    | "true" ExpAndP
    | "false" ExpAndP
    | "intLiteral" ExpAndP
    | "stringLiteral" ExpAndP
    | "charLiteral" ExpAndP
    | "(" Expresion ")" EncadenadoOp ExpAndP
    | "self" EncadenadoOp ExpAndP
    | "id" EncadenadoOp ExpAndP
    | "id" Argumentos-Actuales EncadenadoOp ExpAndP
    | "idClase" "." Llamada-Método EncadenadoOp ExpAndP
    | "new" "idClase" Argumentos-Actuales EncadenadoOp ExpAndP
    | "new" Tipo-Primitivo "[" Expresion "]" ExpAndP
    | Primario Encadenado ExpAndP

ExpAndP ::= "&&" ExpIgual ExpAndP | LAMBDA

ExpIgual ::= ExpAdd OpCompuesto ExpAdd ExpIgualP
    | ExpAdd OpAdd ExpMul ExpIgualP
    | ExpMul OpMul ExpUnExpIgualP
    | OpUnario ExpUn ExpIgualP
    | "nil" ExpIgualP
    | "true" ExpIgualP
    | "false" ExpIgualP
    | "intLiteral" ExpIgualP
    | "stringLiteral" ExpIgualP
    | "charLiteral" ExpIgualP
    | "(" Expresion ")" EncadenadoOp ExpIgualP
    | "self" EncadenadoOp ExpIgualP
    | "id" EncadenadoOp ExpIgualP
    | "id" Argumentos-Actuales EncadenadoOp ExpIgualP
    | "idClase" "." Llamada-Método EncadenadoOp ExpIgualP
    | "new" "idClase" Argumentos-Actuales EncadenadoOp ExpIgualP
    | "new" Tipo-Primitivo "[" Expresion "]" ExpIgualP
    | Primario Encadenado ExpIgualP

ExpIgualP ::= OpIgual ExpCompuesta ExpIgualP | LAMBDA

ExpCompuesta ::= ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" EncadenadoOp 
    | "self" EncadenadoOp 
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp 
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpAdd ::= ExpMul OpMul ExpUn ExpAddP
    | OpUnario ExpUn ExpAddP
    | "nil" ExpAddP
    | "true" ExpAddP
    | "false" ExpAddP
    | "intLiteral" ExpAddP
    | "stringLiteral" ExpAddP
    | "charLiteral" ExpAddP
    | "(" Expresion ")" EncadenadoOp ExpAddP
    | "self" EncadenadoOp ExpAddP
    | "id" EncadenadoOp ExpAddP
    | "id" Argumentos-Actuales EncadenadoOp ExpAddP
    | "idClase" "." Llamada-Método EncadenadoOp ExpAddP
    | "new" "idClase" Argumentos-Actuales EncadenadoOp ExpAddP
    | "new" Tipo-Primitivo "[" Expresion "]" ExpAddP
    | Primario Encadenado ExpAddP

ExpAdd ::= OpAdd ExpMul ExpAddP | LAMBDA

ExpMul ::= OpUnario ExpUn ExpMulP
    | "nil" ExpMulP    
    | "true" ExpMulP
    | "false" ExpMulP
    | "intLiteral" ExpMulP
    | "stringLiteral" ExpMulP
    | "charLiteral" ExpMulP
    | "(" Expresion ")" EncadenadoOp ExpMulP
    | "self" EncadenadoOp ExpMulP
    | "id" EncadenadoOp ExpMulP
    | "id" Argumentos-Actuales EncadenadoOp ExpMulP
    | "idClase" "." Llamada-Método EncadenadoOp ExpMulP
    | "new" "idClase" Argumentos-Actuales EncadenadoOp ExpMulP 
    | "new" Tipo-Primitivo "[" Expresion "]" ExpMulP
    | Primario Encadenado ExpMulP

ExpMul ::= OpMul ExpUn ExpMulP | LAMBDA

ExpUn ::= OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" EncadenadoOp 
    | "self" EncadenadoOp 
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp 
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

OpIgual ::= "==" | "!="
OpCompuesto ::= "<" | ">" | "<=" | ">="
OpAd ::= "+" | "-"
OpUnario ::= "+" | "-" | "!"
OpMul ::= "*" | "/" | "%"
Operando ::= "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" EncadenadoOp 
    | "self" EncadenadoOp 
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp 
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

Llamada-Método ::= "id" Argumentos-Actuales EncadenadoOp

Argumentos-Actuales ::= "(" ")"
Argumentos-Actuales ::= "(" Lista-Expresiones ")"

Primario ::= "(" Expresion ")" EncadenadoOp 
    | "self" EncadenadoOp 
    | "id" EncadenadoOp 
    | "id" Argumentos-Actuales EncadenadoOp 
    | "idClase" "." Llamada-Método EncadenadoOp 
    | "new" "idClase" Argumentos-Actuales EncadenadoOp 
    | "new" Tipo-Primitivo "[" Expresion "]"

Tipo ::= "Bool" | "I32" | "Str" | "Char" | "idClase"  | "Array" Tipo-Primitivo
Tipo-Primitivo ::= "Bool" | "I32" | "Str" | "Char"

Encadenado ::= "." Llamada-Método-Encadenado 
    | "." Acceso-Variable-Encadenado
 
Llamada-Método-Encadenado ::= "id" Argumentos-Actuales EncadenadoOp
Acceso-Variable-Encadenado ::= "id" EncadenadoOp | "id" "[" Expresion "]"

EncadenadoOp ::= Encadenado | LAMBDA

#----------------------------fin gramática tinyRust+---------------------------------
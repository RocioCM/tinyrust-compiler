#------------------------sintaxis completa de tinyRust+-------------------
Start ::= ClaseN Main
ClaseN ::= Clase ClaseN | lambda

Main ::= "{" "static fn main ()" Bloque MiembroN"}"
MiembroN ::= Miembro MiembroN | lambda

Clase ::= "class" "idClase" HerenciaN "{" MiembroN "}"
HerenciaN ::= Herencia | lambda
Herencia ::= ":" "idClase" 
Miembro ::= Atributo | Constructor | Metodo
Atributo ::= VisibilidadN Tipo ":" Lista-Declaración-Variables ";"

VisibilidadN ::= Visibilidad | LAMBDA

Constructor ::= "create" Argumentos-Formales Bloque
Método ::= Forma-MetodoN "fn" "idMétodoVariable" "->" Tipo-Metodo Argumentos-Formales Bloque-Metodo
Forma-MétodoN ::= Forma-Metodo | LAMBDA

Argumentos-Formales ::= "(" Lista-Argumentos-FormalesN ")"
Lista-Argumentos-FormalesN ::= Lista-Argumentos-Formales | lambda

Lista-Argumentos-Formales ::= Argumento-Formal "," Lista-Argumentos-Formales | Argumento-Formal
Argumento-Formal ::= Tipo ":" "idMétodoVariable" 
Forma-Método ::= "static"
Visibilidad ::= "pub"
Tipo-Método ::= Tipo | void
Tipo ::= Tipo-Primitivo | Tipo-Referencia | Tipo-Array
Tipo-Primitivo ::= "Bool" | "I32" | "Str" | "Char"
Tipo-Referencia ::= "idClase" 
Tipo-Array ::= "Array" Tipo-Primitivo 
Lista-Declaración-Variables::= "idMétodoVariable" | "idMétodoVariable" "," Lista-Declaracion-Variables
Bloque-Método ::= "{" Decl-Var-LocalesN SentenciaN "}"

Decl-Var-LocalesN := Decl-Var-Locales Decl-Var-LocalesN | lambda

Decl-Var-Locales ::= "var" Tipo Lista-Declaracion-Variables

Sentencia ::= ";"
    | Asignacion";" 
    | Sentencia-Simple ";" 
    | "if" "(" Expresion ")" Sentencia 
    | "if" "(" Expresion ")" Sentencia "else" Sentencia
    | "while" "(" Expresion ")" Sentencia
    | Bloque
    | "return" ExpresionN";"

ExpresionN := Expresion | LAMBDA

Bloque ::= "{" SentenciaN "}"

SentenciaN ::= Sentencia SentenciaN | LAMBDA

Asignacion ::= Asignacion-Variable-Simple "="" Expresión | Asignación-Self-Simple "="" Expresion
Asignacion-Variable-Simple  ::= "id" Encadenado-SimpleN | "id" "[" Expresion "]"

Encadenado-SimpleN ::= Encadenado-Simple Encadenado-SimpleN | LAMBDA

Asignacion-Self-Simple ::= "self" Encadenado-SimpleN

Encadenado-Simple ::= "." "id"

Sentencia-Simple ::= "(" Expresion ")" 

Expresion ::= ExpOr
ExpOr ::= ExpOr "||" ExpAnd | ExpAnd
ExpAnd ::= ExpAnd "&&" ExpIgual | ExpIgual
ExpIgual ::= ExpIgual OpIgual ExpCompuesta | ExpCompuesta
ExpCompuesta ::= ExpAdd OpCompuesto ExpAdd | ExpAdd
ExpAdd ::= ExpAdd OpAdd ExpMul | ExpMul
ExpMul ::= ExpMul OpMul ExpUn | ExpUn
ExpUn ::= OpUnario ExpUn | Operando

OpIgual ::= "==" | "!="
OpCompuesto ::= "<" | ">" | "<=" | ">="
OpAd ::= "+" | "-"
OpUnario ::= "+" | "-" | "!"
OpMul ::= "*" | "/" | "%"
EncadenadoN ::= Encadenado | LAMBDA
Operando ::= Literal | Primario EncadenadoN
Literal ::= "nil" | "true" | "false" | "intLiteral" | "stringLiteral" | "charLiteral"
Primario ::= ExpresionParentizada | AccesoSelf | AccesoVar  | Llamada-Metodo  | Llamada-MetodoEstatico | Llamada-Constructor
ExpresionParentizada ::= "(" Expresion ")" EncadenadoN
AccesoSelf ::= "self" EncadenadoN
AccesoVar ::= "id" EncadenadoN
Llamada-Método ::= "id" ArgsActuales  EncadenadoN
Llamada-Método-Estático ::= "idClase" "." Llamada-Metodo EncadenadoN
Llamada-Constructor ::= "new" "idClase" Argumentos-Actuales EncadenadoN | "new" Tipo-Primitivo "[" Expresion "]"


ExpresionesN ::= Lista-Expresiones | LAMBDA
Argumentos-Actuales ::= "(" ExpresionesN ")"
Lista-Expresiones ::= Expresion | Expresion "," Lista-Expresiones
Encadenado ::= "." Llamada-Metodo-Encadenado 
    | "." Acceso-Variable-Encadenado
 
Llamada-Método-Encadenado ::= "id" Argumentos-Actuales EncadenadoN
Acceso-Variable-Encadenado ::= "id" EncadenadoN | id "[" Expresion "]"


#----------------------------fin gramática tinyRust+---------------------------------
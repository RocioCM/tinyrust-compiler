#------------------------sintaxis completa de tinyRust+-------------------
Start ::= "{" "static fn main ()" Bloque "}" 
    | "{" "static fn main ()" Bloque Miembros"}" 
    | Clases Main
Clases ::= Clase Clases 
    | "class" "idClase" "{" "}"  
    | "class" "idClase" Herencia "{" "}" 
    | "class" "idClase" "{" Miembros "}" 
    | "class" "idClase" Herencia "{" Miembros "}"

Main ::= "{" "static fn main ()" Bloque "}" | "{" "static fn main ()" Bloque Miembros"}"
Miembros ::= Miembro Miembros
Miembros ::=  Tipo ":" Lista-Declaración-Variables ";" 
    | Visibilidad Tipo ":" Lista-Declaración-Variables ";" 
    | "create" Argumentos-Formales Bloque 
    | "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 
    | Forma-Método "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 

Clase ::= "class" "idClase" "{" "}" 
    | "class" "idClase" Herencia "{" "}" 
    | "class" "idClase" "{" Miembros "}" 
    | "class" "idClase" Herencia "{" Miembros "}"
Herencia ::= ":" "idClase" 
Miembro ::= Tipo ":" Lista-Declaración-Variables ";" 
    | Visibilidad Tipo ":" Lista-Declaración-Variables ";" 
    | "create" Argumentos-Formales Bloque 
    | "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método 
    | Forma-Método "fn" "idMétodoVariable" "->" Tipo-Método Argumentos-Formales Bloque-Método

Argumentos-Formales ::= "(" ")"
Argumentos-Formales ::= "(" Lista-Argumentos-Formales ")"

Lista-Argumentos-Formales ::= Argumento-Formal "," Lista-Argumentos-Formales 
    | Tipo ":" "idMétodoVariable"
Argumento-Formal ::= Tipo ":" "idMétodoVariable" 
Forma-Método ::= "static"
Visibilidad ::= "pub"
Tipo-Método ::= "Bool" | "I32" | "Str" | "Char" | "idClase" | "Array" Tipo-Primitivo | "void"
Tipo ::= "Bool" | "I32" | "Str" | "Char" | "idClase"  | "Array" Tipo-Primitivo
Tipo-Primitivo ::= "Bool" | "I32" | "Str" | "Char"
Lista-Declaración-Variables::= "idMétodoVariable" | "idMétodoVariable" "," Lista-Declaracion-Variables
Bloque-Método ::= "{" "}" 
    | "{" Sentencias "}"
    | "{" Decl-Var-LocalesN "}"
    | "{" Decl-Var-LocalesN Sentencias "}"

Decl-Var-LocalesN ::= Decl-Var-Locales Decl-Var-LocalesN | "var" Tipo Lista-Declaracion-Variables
Decl-Var-Locales ::= "var" Tipo Lista-Declaracion-Variables

Sentencia ::= ";"
    | Asignacion ";" 
    | Sentencia-Simple ";" 
    | "if" "(" Expresion ")" Sentencia 
    | "if" "(" Expresion ")" Sentencia "else" Sentencia
    | "while" "(" Expresion ")" Sentencia
    | "{" "}" 
    | "{" Sentencias "}"
    | "return" Expresion";"
    | "return" ";"

Bloque ::= "{" "}" | "{" Sentencias "}"

Sentencias ::= ";"
    | Asignacion ";" 
    | Sentencia-Simple ";" 
    | "if" "(" Expresion ")" Sentencia 
    | "if" "(" Expresion ")" Sentencia "else" Sentencia
    | "while" "(" Expresion ")" Sentencia
    | "{" "}" 
    | "{" Sentencias "}"
    | "return" Expresion";"
    | "return" ";" 
    | Sentencia Sentencias

Asignacion ::= Asignacion-Variable-Simple "="" Expresión | Asignación-Self-Simple "="" Expresion
Asignacion-Variable-Simple  ::= "id" | "id" "[" Expresion "]"
Asignacion-Variable-Simple  ::= "id" Encadenado-SimpleN | "id" "[" Expresion "]"

Encadenado-SimpleN ::= Encadenado-Simple Encadenado-SimpleN | "." "id"

Asignacion-Self-Simple ::= "self" | "self" Encadenado-SimpleN

Encadenado-Simple ::= "." "id"

Sentencia-Simple ::= "(" Expresion ")" 

Expresion ::= ExpOr "||" ExpAnd 
    | ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpOr ::= ExpOr "||" ExpAnd 
    | ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpAnd ::= ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpIgual ::= ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpCompuesta ::= ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpAdd ::= ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpMul ::= ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

ExpUn ::= OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

OpIgual ::= "==" | "!="
OpCompuesto ::= "<" | ">" | "<=" | ">="
OpAd ::= "+" | "-"
OpUnario ::= "+" | "-" | "!"
OpMul ::= "*" | "/" | "%"
Operando ::= "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado

Primario ::= "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]"
Llamada-Método ::= "id" ArgsActuales Encadenado | "id" ArgsActuales

Argumentos-Actuales ::= "(" ")"
Argumentos-Actuales ::= "(" Lista-Expresiones ")"
Lista-Expresiones ::= ExpOr "||" ExpAnd 
    | ExpAnd "&&" ExpIgual 
    | ExpIgual OpIgual ExpCompuesta 
    | ExpAdd OpCompuesto ExpAdd 
    | ExpAdd OpAdd ExpMul 
    | ExpMul OpMul ExpUn
    | OpUnario ExpUn 
    | "nil" 
    | "true" 
    | "false" 
    | "intLiteral" 
    | "stringLiteral" 
    | "charLiteral" 
    | "(" Expresion ")" Encadenado 
    | "(" Expresion ")" 
    | "self" Encadenado 
    | "self"  
    | "id" Encadenado 
    | "id"   
    | "id" ArgsActuales Encadenado 
    | "id" ArgsActuales  
    | "idClase" "." Llamada-Método Encadenado 
    | "idClase" "." Llamada-Método 
    | "new" "idClase" Argumentos-Actuales 
    | "new" "idClase" Argumentos-Actuales Encadenado 
    | "new" Tipo-Primitivo "[" Expresion "]" 
    | Primario Encadenado
    | Expresion "," Lista-Expresiones

Encadenado ::= "." Llamada-Método-Encadenado 
    | "." Acceso-Variable-Encadenado
 
Llamada-Método-Encadenado ::= "id" Argumentos-Actuales | "id" Argumentos-Actuales Encadenado
Acceso-Variable-Encadenado ::= "id" | "id" Encadenado | id "[" Expresion "]"


#----------------------------fin gramática tinyRust+---------------------------------